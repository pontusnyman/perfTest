import Head from 'next/head'
import styles from '@/styles/Home.module.css'
// We need to include the base CSS in the root of
// the app so all of our components can inherit the styles
// import { CypherCodeBlock } from "@neo4j-ndl/react";
import "@neo4j-ndl/base/lib/neo4j-ds-styles.css";

export default function tooltippage() {
  return (
    <>
      <Head>
        <title>A Button</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <h1>not here yet?</h1>
        {/* Not here yet? */}
      {/* <CypherCodeBlock
        actions={[
          {
            'aria-label': 'copy',
            children: <div className="n-text-light-neutral-text-weak" />,
            onClick: function $a(){},
            title: 'copy'
          },
          {
            'aria-label': 'run',
            children: <p className="n-text-primary-50" />,
            onClick: function $a(){},
            title: 'run'
          }
        ]}
        code="MATCH (:PolicySet)<--(pol:Policy)<-[r]-(per:Person)-[:ELECTED]->(m:Member)-[:BELONGS_TO]->(pty:Party)
            WHERE (m)-[:SITS_IN]->(:House {house: 'commons'})
            WITH pol, type(r) as position, pty, count(per) as numPeople
            ORDER BY pol, pty, position
            WITH pol, pty, apoc.map.fromLists(collect(position), collect(numPeople)) as positions, sum(numPeople) as numPeople
            WITH pol,
            pty,
            toFloat(coalesce(positions['POSITION_AGAINST'],0)) as positionAgainst,
            toFloat(coalesce(positions['POSITION_FOR'], 0)) as positionFor,
            numPeople
            WITH pol,
            pty,
            positionFor / (positionFor + positionAgainst) as propFor, // calculate the proportion of positions in a party for each Policy
            numPeople
            WITH pol,
            pty,
            CASE
            WHEN propFor > 0.5 THEN 'For'
            WHEN propFor < 0.5 THEN 'Against'
            WHEN propFor = 0.5 THEN 'Divided'
            END as position, // Translate the 'proportion for' into For, Against or evenly Divided position attributes
            1 - (2 * abs(propFor - 0.5)) as polarisationScore, // 0 = completely aligned, 1 = Completely divided
            numPeople
            WHERE numPeople > 100 // Filter out positions with less than 100 contributing positions
            RETURN pol.name, pty.party, position, polarisationScore
            // CREATE (pty)-[:PARTY_ALIGNMENT_ON_POLICY {position: position, polarisationScore: polarisationScore }]->(pol)"
        headerTitle="Header"
        maxHeight={320}
        /> */}
      </main>
    </>
  )
}

